/**
 Selection Sort
 <Print # of swap operations>

 Shunji Lin
 10/12/2015
 **/

#include <iostream>
#include <vector>
#include <algorithm>

using namespace std;

int count; // number of swaps

void insertion_sort(vector<int> &sort_vec, int n, int interval) {
  for (int i = interval; i < n; ++i) {
    int pivot = sort_vec[i];
    int j = i - interval;
    while (j >= 0 && A[j] > pivot) { //
      sort_vec[j + interval] = sort_vec[j]; // perform swap
      j = j - interval; // drop by interval
      count++;
    }
    A[j + inteval] = pivot; // put pivot in proper place
  }
}

int main() {
  int n; //number of entries
  cin >> n;

  vector<int> sort_vec;
  //initialize unsorted vector
  for (int i = 0; i < n; ++i) {
    int entry;
    cin >> entry;
    sort_vec.push_back(entry);
  }
  
  vector<int> intervals;
  //initialize array according to formula k_next = 3*k_prev + 1 (Knuth)
  intervals.push_front(1);
  while (true) {
    int next = intervals.front() * 3 + 1;
    if (next >= n) break;
    intervals.push_front(next);
  }

  int intervals_size = intervals.size();
  //shell sort
  for (int i = 0, intervals_size = intervals.size(); i < intervals_size; i++) {
    insertion_sort(&sort_vec, n, intervals[i]);
  }
  
    
  
  
  
  
  
}
	
